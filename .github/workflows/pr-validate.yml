name: PR Validation

on:
  pull_request:
    branches: [ main ]

permissions:
  contents: read

concurrency:
  group: pr-validate-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate:
    name: Lint and Test (Poetry)
    runs-on: ubuntu-latest
    timeout-minutes: 35
    steps:
      - name: Checkout
        # actions/checkout@v4 pinned to commit SHA
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
        with:
          fetch-depth: 1
          submodules: true

      - name: Set up Python
        # actions/setup-python@v5 pinned to commit SHA
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: '3.11'

      - name: Install Poetry
        run: |
          pipx install poetry

      - name: Install system ffmpeg
        run: |
          sudo apt-get update -y
          sudo apt-get install -y ffmpeg

      - name: Cache Poetry
        # actions/cache@v4 pinned to commit SHA
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
          key: poetry-${{ runner.os }}-py311-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-

      - name: Cache pnpm store
        # actions/cache@v4 pinned to commit SHA
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830
        with:
          path: |
            ~/.local/share/pnpm/store
            ~/.cache/node-gyp
          key: pnpm-${{ runner.os }}-${{ hashFiles('package.json', 'pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-${{ runner.os }}-

      - name: Install dependencies
        run: |
          poetry --version
          poetry install

      - name: Ruff check
        shell: bash
        run: |
          set -o pipefail
          poetry run ruff check . | tee ruff-report.txt

      - name: Pytest with coverage (skip slow)
        run: poetry run pytest -m "not slow" --cov --junitxml=pytest-junit.xml --cov-report=xml --log-file=pytest.log

      - name: Upload coverage.xml
        if: always()
        # actions/upload-artifact@v4 pinned to commit SHA
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: coverage-xml
          path: coverage.xml

      - name: Upload junit report
        if: always()
        # actions/upload-artifact@v4 pinned to commit SHA
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: pytest-junit
          path: pytest-junit.xml

      - name: Upload lint and test logs
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: pr-validate-logs
          path: |
            ruff-report.txt
            pytest.log

  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    needs: validate
    continue-on-error: true
    timeout-minutes: 25
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: '3.11'

      - name: Install Poetry
        run: pipx install poetry

      - name: Cache Poetry
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
          key: poetry-${{ runner.os }}-py311-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-

      - name: Install dependencies
        run: |
          poetry install
          poetry run pip install mypy bandit

      - name: Install shell tooling
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck shfmt

      - name: mypy (configuration module only)
        shell: bash
        run: |
          set -o pipefail
          poetry run mypy namer/configuration.py | tee mypy.log

      - name: mypy (core packages)
        shell: bash
        run: |
          set -o pipefail
          poetry run mypy namer/watchdog.py namer/metadata_providers | tee -a mypy.log

      - name: bandit scan
        shell: bash
        run: |
          set -o pipefail
          poetry run bandit -q -r namer -x namer/web,tests -f json -o bandit.json
          poetry run bandit -q -r namer -x namer/web,tests -f txt | tee bandit.txt

      - name: shfmt check
        shell: bash
        run: |
          set -o pipefail
          if [ -z "$(find scripts -name '*.sh' -print -quit)" ]; then
            echo "No shell scripts found" | tee shfmt.log
            exit 0
          fi
          find scripts -name '*.sh' -print0 | xargs -0 -r -n1 shfmt -d | tee shfmt.log

      - name: shellcheck scripts
        shell: bash
        run: |
          set -o pipefail
          if [ -z "$(find scripts -name '*.sh' -print -quit)" ]; then
            echo "No shell scripts found" | tee shellcheck.log
            exit 0
          fi
          find scripts -name '*.sh' -print0 | xargs -0 -r shellcheck | tee shellcheck.log

      - name: Hadolint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          output-file: hadolint.log

      - name: Upload static analysis results
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: static-analysis-logs
          path: |
            bandit.json
            bandit.txt
            mypy.log
            shfmt.log
            shellcheck.log
            hadolint.log

  smoke:
    name: Build (amd64) container
    runs-on: ubuntu-latest
    needs: validate
    timeout-minutes: 40
    if: ${{ github.event_name == 'pull_request' }}
    permissions:
      contents: read
    steps:
      - name: Checkout
        # actions/checkout@v4 pinned to commit SHA
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
        with:
          fetch-depth: 1

      - name: Set up Docker Buildx
        # docker/setup-buildx-action@v3 pinned to commit SHA
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435

      - name: Build image (amd64, load locally)
        # docker/build-push-action@v6 pinned to commit SHA
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83
        with:
          context: .
          platforms: linux/amd64
          tags: nehpz/namer:pr-${{ github.sha }}
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Start container
        run: |
          docker run -d --name namer \
            -e NAMER_CONFIG=/config/namer.cfg \
            -e STASHDB_TOKEN=dummy-ci-token \
            -p 6980:6980 \
            -v "${{ github.workspace }}/config:/config:ro" \
            nehpz/namer:pr-${{ github.sha }}
          # Give it a moment to start
          sleep 15

      - name: Dump logs on failure
        if: failure()
        run: |
          docker logs namer || true

      - name: Cleanup
        if: always()
        run: |
          docker rm -f namer || true
