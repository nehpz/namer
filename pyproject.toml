[project]
name = "namer"
version = "1.21.0"
description = "A namer of video files based on metadata from the porndb."
readme = "readme.rst"
authors = [
    { name = "nehpz", email = "admin@rzp.one" },
]
dynamic = ["dependencies"]
requires-python = ">=3.11,<3.15"

[tool.poetry]
package-mode = true
include = [
    { path = "namer/web/public/assets/**/*", format = ["sdist", "wheel"] },
    { path = "namer/web/templates/**/*", format = ["sdist", "wheel"] },
    { path = "namer/tools/videohashes*", format = ["sdist", "wheel"] },
    { path = "namer/namer.cfg.default", format = ["sdist", "wheel"] }
]

[tool.poetry.dependencies]
rapidfuzz = "^3.14"
watchdog = "^6.0"
pathvalidate = "^3.2"
requests = "^2.32"
mutagen = "^1.47"
schedule = "^1.2"
loguru = "^0.7"
Unidecode = "^1.3"
flask = "^3.1"
waitress = "^3.0"
Flask-Compress = "^1.15"
Flask-WTF = "^1.2"
Pillow = "^11.1"
requests-cache = "^1.2"
ffmpeg-python = "^0.2"
jsonpickle = "^4.0"
ConfigUpdater = "^3.2"
oshash = "^0.1"
pony = "^0.7"
numpy = "^2.3"
scipy = "^1.16"
orjson = "^3.10"
defusedxml = "^0.7"
# Pin attrs/cattrs <25 due to breaking changes in serialization behavior with jsonpickle
# See: https://github.com/python-attrs/attrs/releases/tag/25.0.0
attrs = "<25.0.0"
cattrs = "<25.0.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.4"
pytest-cov = "^7.0"
coverage = "^7.10.6"
bandit = "^1.7"
mypy = "^1.11"
ruff = "^0.13"
selenium = "^4.21"
assertpy = "^1.1"
poethepoet = "^0.37"
pony-stubs = "^0.5"
scipy-stubs = "^1.16"

[tool.ruff]
exclude = [".git", "__pycache__", "docs/source/conf.py", "old", "build", "dist", "*migrations*", "init", "node_modules"]
line-length = 320
indent-width = 4
target-version = "py311"

[tool.ruff.format]
quote-style = "single"
indent-style = "space"
line-ending = "auto"

[tool.ruff.lint]
select = ["E", "F"]
ignore = ["E501", "E722"]

[tool.poe.tasks]
install_npm = { shell = "pnpm install" }
build_node = { shell = "pnpm run build" }
install_videohashes_src = { shell = "command -v git >/dev/null 2>&1 && git submodule update --init --recursive || echo 'Skipping git sub module update'" }
build_videohashes = { shell = "ARCH=$(uname -m | sed 's/x86_64/amd64/' | sed 's/aarch64/arm64/') && OS=$(uname -s | tr '[:upper:]' '[:lower:]') && if [ -d ./videohashes ] && [ -f ./videohashes/Makefile ]; then mkdir -p ./videohashes/dist && if [ \"$OS\" = \"darwin\" ]; then make macos-$ARCH -C ./videohashes; else make linux-$ARCH -C ./videohashes; fi; else echo 'Skipping videohashes build (submodule/Makefile not present)'; fi" }
move_videohashes = { shell = "if [ -d ./videohashes/dist ]; then mkdir -p ./namer/tools && cp -r ./videohashes/dist/* ./namer/tools/; else echo 'Skipping copy (dist missing)'; fi" }
build_deps = ["install_npm", "build_node", "install_videohashes_src", "build_videohashes", "move_videohashes"]
# Docker builds use this variant since videohashes is built separately in a dedicated RUN step
build_deps_no_videohashes = ["install_npm", "build_node"]
test_format = { shell = "poetry run ruff check ." }
test_namer = { shell = 'poetry run pytest --log-cli-level=info --capture=no -m "not slow"' }
test_namer_slow = { shell = 'poetry run pytest --log-cli-level=info --capture=no -m "slow"' }
test_full = { shell = 'poetry run pytest --log-cli-level=info --capture=no' }
test = ["test_format", "test_namer"]
build_all = ["build_deps", "test", "build_namer"]
build_fast = ["build_deps", "build_namer"]
test_quick = ["test_format"]
test_unit = { shell = 'poetry run pytest --log-cli-level=info --capture=no -x -v -m "not slow"' }
precommit = ["test_format", "test_unit"]
dev_build = ["build_deps", "test_quick", "build_namer"]

[tool.poetry.build]
generate-setup-file = true

[project.scripts]
namer = "namer.__main__:main"

[build-system]
requires = ["poetry-core>=2.1"]
build-backend = "poetry.core.masonry.api"
